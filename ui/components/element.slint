import { HorizontalBox } from "std-widgets.slint";

import { IconButton } from "../components/icon-btn.slint";
import { ZTag } from "../components/tag.slint";
import { Theme } from "../theme.slint";
import { Element } from "../logic.slint";


component Items inherits Rectangle {
    in-out property <InputType> input-type;
    in property <bool> copy;
    in property <bool> reveal;
    in property <string> name;
    in property <string> value;

    border-radius: 8pt;
    background: Theme.primary;
    VerticalLayout {
        alignment: center;
        padding-left: 5pt;
        padding-right: 5pt;
        HorizontalLayout {
            alignment: space-between;
            Text {
                width: 80pt;
                text: name;
                font-size: 11pt;
                color: Theme.window-background-inverse.transparentize(40%);
            }
            HorizontalLayout {
                alignment: start;
                width: parent.width - 140pt;
                padding-left: 2pt;
                padding-right: 2pt;
                value-input := TextInput {
                    text: value;
                    read-only: true;
                    font-size: 14pt;
                    width: parent.width;
                    input-type: root.input-type;
                    color: Theme.window-background-inverse;
                }
            }
            HorizontalLayout {
                alignment: space-around;
                min-width: 45pt;
                if reveal: IconButton {
                    background: Theme.window-background-inverse;
                    hover-color: Theme.secondary;
                    source: @image-url("../images/closed-eye.svg");
                    img-width: 15pt;
                    img-height: 15pt;
                    clicked => {
                        if (value-input.input-type == InputType.text) {
                            value-input.input-type = InputType.password;
                        } else {
                            value-input.input-type = InputType.text;
                        }
                    }
                }
                if copy: IconButton {
                    background: Theme.window-background-inverse;
                    hover-color: Theme.secondary;
                    source: @image-url("../images/copy.svg");
                    img-width: 15pt;
                    img-height: 15pt;
                    clicked => {
                        debug("copy");
                    }
                }
            }
        }
    }
}

export component ElementOfItem inherits VerticalLayout {
    in property <int> index : 0;
    in property <Element> data;

    callback edit(int /* index */);
    callback delete(int /* index */);

    alignment: start;
    padding: 10pt;
    padding-left: 20pt;
    padding-right: 20pt;
    width: Theme.app-width - 245pt;
    HorizontalLayout {
        alignment: space-between;
        Image {
            source: data.icon;
            colorize: red;
            height: 45pt;
            width: 45pt;
        }
        HorizontalBox {
            IconButton {
                background: Theme.window-background-inverse;
                hover-color: Theme.secondary;
                source: @image-url("../images/edit.svg");
                img-width: 15pt;
                img-height: 15pt;
                text: "edit";
                clicked => {
                    edit(index);
                }
            }
            IconButton {
                background: Theme.window-background-inverse;
                hover-color: Theme.secondary;
                source: @image-url("../images/del.svg");
                img-width: 15pt;
                img-height: 15pt;
                text: "delete";
                clicked => {
                    delete(index);
                }
            }
         }
    }
    VerticalLayout {
        spacing: 5pt;
        padding-top: 15pt;
        HorizontalLayout {
            alignment: center;
            Items {
                width: parent.width;
                height: 35pt;
                copy: true;
                reveal: true;
                name: data.website;
                value: data.name;
            }
        }
        HorizontalLayout {
            alignment: center;
            Items {
                width: parent.width;
                height: 35pt;
                copy: true;
                reveal: true;
                input-type: password;
                name: "passowrd";
                value: "dasdasdsadsands884btnio";
            }
        }
    }
    VerticalLayout {
        padding-top: 15pt;
        Text {
            text: "Additional";
            font-family: Theme.font-family;
            font-size: Theme.font-size-medium;
        }
    }
    VerticalLayout {
        spacing: 5pt;
        HorizontalLayout {
            alignment: center;
            Items {
                width: parent.width;
                height: 35pt;
                copy: true;
                reveal: true;
                name: "Note";
                value: "Note test";
            }
        }
    }
    VerticalLayout {
        padding-top: 10pt;
        HorizontalLayout {
            alignment: end;
            Text {
                text: "Last Modified:";
            }
            Text {
                text: "10 January 2019 22:44:48 +05";
            }
        }
        HorizontalLayout {
            alignment: end;
            Text {
                text: "Created::";
            }
            Text {
                text: "1 January 2019 22:44:48 +05";
            }
        }
    }
}

