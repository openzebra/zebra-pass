import { ListView } from "std-widgets.slint";

export component ZComboBox inherits Rectangle {
    in-out property<bool> enabled : true;
    in-out property<string> value;
    in property<[string]> choices;
    in property <length> font-size : 14pt;
    in property <color> font-color;
    in property <color> hover-color;
    in property <color> hover-font-color;

    border-radius: 8pt;
    border-width: 1pt;
    border-color: #000;
    height: 36pt;
    min-width: label.x + label.width + i.width;
    horizontal-stretch: 1;

    label := Text {
        vertical-alignment: center;
        horizontal-alignment: left;
        text <=> root.value;
        color: root.font-color;
        font-size: root.font-size;
        x: 12px;
    }
    i := Image {
        source: @image-url("../images/del.svg"); // TODO: Add down as component
        colorize: red;
        height: 40%;
        width: self.height;
        image-fit: contain;
        x: parent.width - self.width - self.y;
        y: (parent.height - self.height)/2;
    }

    TouchArea {
        mouse-cursor: pointer;

        clicked => {
            popup.show();
        }
    }

    popup := PopupWindow {
        x:0;
        y: root.height + 1pt;
        width: root.width;

        Rectangle {
            background: root.background;
            border-radius: 8pt;
            border-color: root.border-color;
            border-width: 3pt;
        }
        ListView {
            // min-height: 200pt;
            for value[idx] in root.choices: Rectangle {
                background: item-area.has-hover ? root.hover-color : root.background;
                border-radius: 8pt;
                HorizontalLayout {
                    padding: 4pt;
                    padding-left: 10pt;
                    Text {
                        text: value;
                        color: item-area.has-hover ? root.hover-font-color : root.font-color;
                        font-size: root.font-size;
                    }
                }
                item-area := TouchArea {
                    mouse-cursor: pointer;
                    clicked => {
                        root.value = value;
                    }
                }
            }
        }
    }
}