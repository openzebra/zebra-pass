import { ScrollView , VerticalBox} from "std-widgets.slint";

import { IconButton } from "../components/icon-btn.slint";
import { RecordField } from "../components/field.slint";
import { Theme } from "../theme.slint";
import { KeyChainLogic, Element } from "../logic.slint";
import { ZButton } from "./button.slint";
import { PassGenForm } from "../components/pass-gen-form.slint";

export component EditLogin {
    in property <bool> read-only;
    in property <bool> edit : false;
    in-out property <Element> element : {
        name: "",
        website: "",
        icon: @image-url("../images/add.svg"),
        type: 0,
        favourite: false,
        created: "",
        updated: "",
        fields: [
            {
                title: "Username",
                value: "",
                hide: false,
                copy: false
            },
            {
                title: "Password",
                value: "",
                hide: true,
                copy: false
            },
            {
                title: "Authenticator key (TOTP)",
                value: "",
                hide: false,
                copy: false
            },
        ],
        extra_fields: []
    };

    callback save(Element);

    popup := PopupWindow {
        close-on-click: false;

        Rectangle {
            background: Theme.window-background;
            border-color: Theme.window-background-inverse;
            border-width: 2pt;
            border-radius: 8pt;
            padding: 16pt;
        }
        VerticalBox {
            padding: 16pt;
            PassGenForm {
                on-random(pass) => {
                    element.fields[1].value = pass;
                }
            }
        }
    }
    VerticalLayout {
        ScrollView {
            height: Theme.app-height - 140pt;
            VerticalLayout {
                spacing: 5pt;
                RecordField {
                    height: 40pt;
                    background: Theme.primary;
                    read-only: root.read-only;
                    label: @tr("Name");
                    value: element.name;
                }
                RecordField {
                    height: 40pt;
                    background: Theme.primary;
                    read-only: root.read-only;
                    label: @tr("website");
                    value: element.website;
                }
                RecordField {
                    height: 40pt;
                    background: Theme.primary;
                    read-only: root.read-only;
                    label: element.fields[0].title;
                    value: element.fields[0].value;
                }
                RecordField {
                    height: 40pt;
                    background: Theme.primary;
                    read-only: root.read-only;
                    label: element.fields[1].title;
                    value: element.fields[1].value;
                    reload: true;
                    hide: true;
                    refrash => {
                        popup.show();
                    }
                    edited(value) => {
                        element.fields[1].value = value;
                    }
                }
                RecordField {
                    height: 40pt;
                    background: Theme.primary;
                    read-only: root.read-only;
                    label: element.fields[2].title;
                    value: element.fields[2].value;
                }
            }
        }
        // add extra fields.
        HorizontalLayout {
            alignment: center;
            ZButton {
                text: @tr("Save");
                background: Theme.window-background-inverse;
                color: Theme.window-background;
                width: 120pt;
                height: 30pt;
                clicked => {
                    save(element);
                }
            }
        }
    }
}
